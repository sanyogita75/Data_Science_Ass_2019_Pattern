# -*- coding: utf-8 -*-
"""
Created on Sun May 15 13:17:30 2022
Ass7
@author: sanyo
"""
#%%
import nltk
#%%
nltk.download('punkt')
#%%
from nltk.tokenize import sent_tokenize
text="""Hello Mr. Smith, how are you doing today? The weather is great, and city is awesome. The sky is pinkish-blue. You shouldn't eat cardboard"""
tokenized_text=sent_tokenize(text)
print(tokenized_text)
#%%
from nltk.tokenize import word_tokenize
tokenized_word=word_tokenize(text)
print(tokenized_word)
#%% 
from nltk.probability import FreqDist
fdist = FreqDist(tokenized_word)
print(fdist)
#%%
fdist.most_common()
#%%
nltk.download('stopwords')
from nltk.corpus import stopwords
stop_words=set(stopwords.words("english"))
print(stop_words)
#%%
filtered_sent=[]
for w in tokenized_word:
    if w not in stop_words:
        filtered_sent.append(w)
print("Tokenized Sentence:",tokenized_word)
print("Filterd Sentence:",filtered_sent)
#%%
from nltk.stem import PorterStemmer
from nltk.tokenize import sent_tokenize, word_tokenize

ps = PorterStemmer()

stemmed_words=[]
for w in filtered_sent:
    stemmed_words.append(ps.stem(w))

print("Filtered Sentence:",filtered_sent)
print("Stemmed Sentence:",stemmed_words)
#%%
nltk.download('wordnet')
from nltk.stem.wordnet import WordNetLemmatizer
lem = WordNetLemmatizer()

from nltk.stem.porter import PorterStemmer
stem = PorterStemmer()

word = "flying"
print("Lemmatized Word:",lem.lemmatize(word,"v"))
print("Stemmed Word:",stem.stem(word))
#%%
sent = "Albert Einstein was born in Ulm, Germany in 1879."
#%%
tokens=nltk.word_tokenize(sent)
print(tokens)
#%%
nltk.download('averaged_perceptron_tagger')
nltk.pos_tag(tokens)
#%%
import pandas as pd
df=pd.read_csv('train.tsv', sep='\t')
#%%
from sklearn.feature_extraction.text import TfidfVectorizer
tf=TfidfVectorizer()
text_tf= tf.fit_transform(df['Phrase'])
#%%
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test=train_test_split(text_tf,df['Sentiment'],test_size=0.3,random_state=123)
#%%
from sklearn.naive_bayes import MultinomialNB
from sklearn import metrics
# Model Generation Using Multinomial Naive Bayes
clf = MultinomialNB().fit(X_train, y_train)
predicted= clf.predict(X_test)
print("MultinomialNB Accuracy:",metrics.accuracy_score(y_test, predicted))
